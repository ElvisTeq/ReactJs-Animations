## 1 Preparing Project

- "Modal.css"
  => (Added)
  => ".ModalOpen" to display: block (display content)
  => ".ModalClosed" to display: none (hide content)

- "Backdrop.css"
  => (Added)
  => ".BackdrpOpen" to display: block (display content)
  => ".BackdropClosed" to display: none (hide content)

- "Backdrop.js" & "Modal.css"
  => Added CSS Component <className={ if true/faalse }>

- "App.js"
  => Created State (true/false) to toggle <Modal> <Backdrop>
  => Created Functions To Toggle State True/False

////////////////////////////////////////////////////////////////////////////////////////

## 2 Using CSS Transitions

- "Modal.css"
  => Implementing CSS Transitions

------------------------------------------------ transition: all 0.3 ease-out
transition/make effect changes every 0.3 seconds

------------------------------------------------ transform: translateY(%)
transform => apply effect
translateY(%) => slice from Y axis effect
(0) => original pos
(100%) => moves up
(-100%) => moves down

**\*** display: "block"
=> (removed) It was interfering with the effects

////////////////////////////////////////////////////////////////////////////////////////

## 3 Using CSS Animations

- "Modal.css"
  => Implementing CSS Animations

------------------------------------------------ @keyframes **_anyName_** { %{} %{} }
To apply effects on a specific % of the animation
(0% = start) (100% = end)

------------------------------------------------ animation: **_anyName_** 0.4s ease-out forwards;
0.4s => time of animation
ease-out => animation effect
forwards => keep @keyframes effect to (%100)

////////////////////////////////////////////////////////////////////////////////////////

## 4 CSS Transition & Animations Limitations

\*\* Fixing Invisible Modal Blocking Buttons \*\*

- "App.js"
  => Using { State } To Display <Modal> <Backdrop>

## Limitations

- "Modal.js"
  => closeModal animation not working (website not re-rendering when closing Modal)

////////////////////////////////////////////////////////////////////////////////////////

## 5 Using ReactTransition Group

- "App.js"
  => Implementing { Transition } from "react-transition-group/Transition";
  => Created <Button> To toggle state (true/false)

----------------------------------------------- npm i react-transition-group --save
3rd party package for better animation

----------------------------------------------- import { Transition } from "react-transition-group/Transition";
<Transition
in={this.state.showBlock} // (true/false)
timeout={1000} // (Total animation time)
mountOnEnter // (Add to DOM if true)
unmountOnExit // (Remove from DOM if false)

> {(state) => (

  <div
    style={{
      backgroundColor: "red",
      width: 100,
      height: 100,
      margin: "auto",
      transition: "opacity 1s ease-out", // (Effect)
       opacity: state === "exiting" ? 0 : 1, // (Apply Effect on Transition "state")
    }}/>
)}            
</Transition>

**\*** <Transition> Contains 4 Animation States **\***

- "entering"
- "entered"
- "exiting"
- "exited"

////////////////////////////////////////////////////////////////////////////////////////

## 6 Using the Transition Component For the Modal

- "App.js"
  => Using { <Transition> } For the Modal
  => Passing <Transition> State to the Modal Component

- "Modal.js"
  => Handling the <Transition> States To Show/Hide Modal

////////////////////////////////////////////////////////////////////////////////////////

## 7 Wrapping the Transition Component

- "App.js"
  => Change "Modal.js" to always display

- "Modal.js"
  => Using <Transition> To Toggle Modal Animations & Show/Hide

////////////////////////////////////////////////////////////////////////////////////////

## 8 Animation Timings

- "Modal.js"
  => Adding Different Timers for Entering & Exiting
  => Added animationTiming function for <Transition timeout={animationTimingFunc}>

------------------------------------------- const animationTiming = { enter: 400, exit: 1000 }
enter => "entering"
exit => "exiting"

**\*** CSS animation timing Should match the animationTiming Function time **\***

////////////////////////////////////////////////////////////////////////////////////////

## 9 Transition Events

- To Execute Functions During a Transition

- "App.js"
  => Implemented Transition Events Examples

------------------------------------------- <Transition onEnter={() => {}}>
Executes when 0%

------------------------------------------- <Transition onEntering={() => {}}>
Executes when 1% ~ 99%

------------------------------------------- <Transition onEntered={() => {}}>
Executes when 100%

------------------------------------------- <Transition onExit={() => {}}>
Executes when 0%

------------------------------------------- <Transition onExiting={() => {}}>
Executes when 1% ~ 99%

------------------------------------------- <Transition onExited={() => {}}>
Executes when 100%

////////////////////////////////////////////////////////////////////////////////////////

## 10 The CSSTransition Component

- "Modal.js"
  => Replacing <Transition> with <CSSTransition>
  => Using <CSSTransition classNames="anyName"> To set animation with CSS

- "Modal.css"
  => Added the <CSSTransition classNames="anyName"> animation states

------------------------------------------- import CSSTransition from "react-transition-group/CSSTransition";
<CSSTransition
mountOnEnter
unmountOnExit
in={props.show}
timeout={animationTiming}
classNames="fade-slide"> // CSS animation State

<div>Whatever Here To apply CSS Effects</div>

</CSSTransition>

**\*** classNames="" Animation States **\***

- .anyName-enter { CSS here }
  => On start, 1 frame

- .anyName-enter-active { CSS here }
  => onEntering & onEntered

- .anyName-exit { CSS here }
  => On Exit, 1 frame

- .anyName-exit-active { CSS here }
  => onExiting % onExited

////////////////////////////////////////////////////////////////////////////////////////

## 11 Using Custom CSS Classnames in <CSSTransition>

- "Modal.js"
  => Usinc Custom <CSSTransition classNames={{}}>

**\*** classNames={{}} custom states **\***
classNames={{
 enter: "",
 enterActive: "",
 exit: "",
 exitActive: "",
 appear: "",  (When CSS is first mounted to the DOM) (Optional to add)
 appearActive: "",  (When CSS is first mounted to the DOM)) (Optional to add)
}}

////////////////////////////////////////////////////////////////////////////////////////

## 12 Animating Lists

- "List.js"
  => Implementing {TransitionGroup} to replace <ul> So we can Animate one Item in the List
  => Using {CSSTransition} to add animation to <li> JSX

- "List.css"
  => Added State Effects for <CSSTransition classNames=''>

------------------------------------------------ import { TransitionGroup } from "react-transition-group";
Used for <ul> only combined with { CSSTransition } to animate the <li> elements

**\*** {TransitionGroup} Will automatically Give the <in={}> property to {CSSTransition} **\***

- Automatically detects which <li> item is Created/Deleted to animate
